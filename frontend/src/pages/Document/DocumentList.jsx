import React, { useEffect, useState, useCallback } from "react";
import { useLocation, Link } from "react-router-dom";
import { fetchDocuments } from "../../services/documentService";
import "./Document.css";

const educationLevelMap = {
  grade1: "primary",
  grade2: "secondary",
  grade3: "highschool",
  university: "university",
};

const gradeMap = {
  grade1: ["1", "2", "3", "4", "5"],
  grade2: ["6", "7", "8", "9"],
  grade3: ["10", "11", "12"],
};

const universitySubjects = [
  { value: "advanced_math", label: "To√°n cao c·∫•p" },
  { value: "calculus", label: "Gi·∫£i t√≠ch" },
  { value: "algebra", label: "ƒê·∫°i s·ªë" },
  { value: "probability_statistics", label: "X√°c su·∫•t th·ªëng k√™" },
  { value: "differential_equations", label: "Ph∆∞∆°ng tr√¨nh vi ph√¢n" },
];

const DocumentList = () => {
  const location = useLocation();
  const path = location.pathname.split("/")[2];
  const [documents, setDocuments] = useState([]);
  const [filters, setFilters] = useState({ grade: "", subject: "", documentType: "" });

  const fetchDocs = useCallback(async () => {
    const level = educationLevelMap[path];
    const queryFilters = {
      educationLevel: level,
      documentType: filters.documentType,
    };

    if (path === "university") {
      queryFilters.subject = filters.subject;
    } else {
      queryFilters.grade = filters.grade;
    }

    try {
      const docs = await fetchDocuments(queryFilters);
      setDocuments(docs);
    } catch (error) {
      console.error("Error fetching documents:", error);
      setDocuments([]);
    }
  }, [path, filters]);

  useEffect(() => {
    fetchDocs();
  }, [fetchDocs]); // fetchDocs ƒë√£ ƒë∆∞·ª£c b·ªçc trong useCallback, kh√¥ng c·∫ßn th√™m path v√† filters

  useEffect(() => {
    setFilters({ grade: "", subject: "", documentType: "" });
  }, [path]);

  return (
    <div className="doclist-container">
      <h2>üìö Danh s√°ch t√†i li·ªáu - {path?.toUpperCase()}</h2>

      <div className="filters">
        {path === "university" ? (
          <select
            value={filters.subject}
            onChange={(e) => setFilters({ ...filters, subject: e.target.value, grade: "" })}
          >
            <option value="">-- Ch·ªçn m√¥n h·ªçc --</option>
            {universitySubjects.map((subject) => (
              <option key={subject.value} value={subject.value}>
                {subject.label}
              </option>
            ))}
          </select>
        ) : (
          <select
            value={filters.grade}
            onChange={(e) => setFilters({ ...filters, grade: e.target.value, subject: "" })}
          >
            <option value="">-- Ch·ªçn l·ªõp --</option>
            {gradeMap[path]?.map((grade) => (
              <option key={grade} value={grade}>
                L·ªõp {grade}
              </option>
            ))}
          </select>
        )}

        <select
          value={filters.documentType}
          onChange={(e) => setFilters({ ...filters, documentType: e.target.value })}
        >
          <option value="">-- Lo·∫°i t√†i li·ªáu --</option>
          <option value="textbook">Gi√°o tr√¨nh</option>
          <option value="exercise">B√†i t·∫≠p</option>
          <option value="reference">Tham kh·∫£o</option>
        </select>
      </div>

      <div className="doc-grid">
        {documents.length > 0 ? (
          documents.map((doc) => (
            <div key={doc._id} className="doc-card">
              <img src={doc.thumbnail || "/assets/images/default-doc.png"} alt="thumbnail" />
              <h4>{doc.title}</h4>
              <p>{doc.description?.slice(0, 80)}...</p>
              <Link to={`/documents/detail/${doc._id}`} className="view-link">
                Xem chi ti·∫øt ‚Üí
              </Link>
            </div>
          ))
        ) : (
          <p>Kh√¥ng c√≥ t√†i li·ªáu n√†o ph√π h·ª£p.</p>
        )}
      </div>
    </div>
  );
};

export default DocumentList;